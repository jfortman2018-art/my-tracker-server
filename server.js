// --- БЛОК 1: Подключение необходимых модулей ---
// Express — это популярный фреймворк для создания веб-серверов на Node.js. Он упрощает работу с запросами.
const express = require('express');
// fs (File System) — встроенный модуль Node.js для работы с файлами. Нужен для чтения и записи логов.
const fs = require('fs');
// path — встроенный модуль для работы с путями к файлам.
const path = require('path');

// --- БЛОК 2: Начальная настройка сервера ---
// Создаем экземпляр нашего приложения
const app = express();
// Определяем порт, на котором будет работать сервер. Хостинги обычно предоставляют свой порт через переменную окружения PORT.
const PORT = process.env.PORT || 3000;
// Определяем путь к файлу, где будем хранить все данные. Он будет лежать рядом с server.js.
const LOG_FILE = path.join(__dirname, 'log.json');

// --- БЛОК 3: Настройка "посредников" (Middleware) ---
// Эта строка говорит серверу использовать встроенный в Express обработчик для JSON-данных.
// Он автоматически превращает JSON-строку из запроса в JavaScript-объект.
app.use(express.json());
// Эта строка делает все файлы в текущей папке (index.html, tracker.js и т.д.) доступными из браузера.
// Это позволяет браузеру загружать ваши HTML и JS файлы.
app.use(express.static(__dirname));

// --- БЛОК 4: Инициализация файла логов ---
// Проверяем, существует ли файл log.json.
if (!fs.existsSync(LOG_FILE)) {
    // Если нет, создаем его с пустым массивом внутри, чтобы избежать ошибок при первом чтении.
    fs.writeFileSync(LOG_FILE, '[]', 'utf8');
}

// --- БЛОК 5: Создание обработчиков запросов (API) ---

// 1. Обработчик для ПРИЕМА данных (когда tracker.js отправляет информацию)
// Сервер будет слушать POST-запросы по адресу /log-data
app.post('/log-data', (req, res) => {
    // Получаем данные, которые пришли в теле запроса (благодаря app.use(express.json()) они уже в виде объекта)
    const newLogEntry = req.body;
    
    // Выводим в консоль сервера для отладки
    console.log('Получена новая запись:', newLogEntry);

    // Читаем текущее содержимое файла логов
    fs.readFile(LOG_FILE, 'utf8', (err, data) => {
        if (err) {
            console.error('Ошибка чтения лог-файла:', err);
            return res.status(500).send('Ошибка на сервере');
        }

        // Превращаем прочитанную строку в массив JavaScript-объектов
        const logs = JSON.parse(data);
        // Добавляем новую запись в НАЧАЛО массива, чтобы самые свежие данные всегда были первыми
        logs.unshift(newLogEntry);
        
        // Превращаем обновленный массив обратно в красивую JSON-строку и записываем в файл
        fs.writeFile(LOG_FILE, JSON.stringify(logs, null, 2), (err) => {
            if (err) {
                console.error('Ошибка записи в лог-файл:', err);
                return res.status(500).send('Ошибка на сервере');
            }
            // Отправляем успешный ответ, что данные получены и сохранены
            res.status(200).send({ status: 'ok' });
        });
    });
});

// 2. Обработчик для ОТДАЧИ данных (когда dashboard.js запрашивает информацию)
// Сервер будет слушать GET-запросы по адресу /get-data
app.get('/get-data', (req, res) => {
    // Читаем файл логов
    fs.readFile(LOG_FILE, 'utf8', (err, data) => {
        if (err) {
            console.error('Ошибка чтения лог-файла:', err);
            return res.status(500).send('Ошибка на сервере');
        }
        // Просто отправляем все содержимое файла в ответ
        res.setHeader('Content-Type', 'application/json');
        res.send(data);
    });
});

// --- БЛОК 6: Запуск сервера ---
// Говорим приложению начать слушать указанный порт
app.listen(PORT, () => {
    console.log(`Сервер успешно запущен и работает на порту ${PORT}`);
});